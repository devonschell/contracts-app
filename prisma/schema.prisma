// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Contract {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  clerkUserId  String
  title        String?
  counterparty String?
  status       String  @default("ACTIVE") // ACTIVE | REVIEW | TERMINATED

  startDate   DateTime?
  endDate     DateTime?
  renewalDate DateTime?
  autoRenew   Boolean?

  monthlyFee Float?
  annualFee  Float?
  lateFeePct Float?

  renewalNoticeDays Int?
  termLengthMonths  Int?

  billingCadence String?
  paymentCadence String?

  // AI-extracted bullets (arrays saved as JSON)
  unusualClauses    Json? // string[]
  terminationRights Json? // string[]

  currentUploadId String? @unique
  currentUpload   Upload? @relation("CurrentUpload", fields: [currentUploadId], references: [id])

  uploads Upload[] @relation("ContractUploads")

  // NEW: back-relation so NotificationLog.contract has a peer
  logs NotificationLog[] @relation("ContractLogs")

  @@index([clerkUserId])
}

model Upload {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  contractId   String
  clerkUserId  String
  originalName String
  url          String
  bytes        Int
  aiSummary    String?

  contract   Contract  @relation("ContractUploads", fields: [contractId], references: [id], onDelete: Cascade)
  currentFor Contract? @relation("CurrentUpload")

  @@index([contractId])
  @@index([clerkUserId])
}

model CompanyProfile {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  clerkUserId String  @unique
  companyName String?
  logoUrl     String?

  // Settings
  billingEmail           String?
  timezone               String?   // e.g. "America/New_York"
  currency               String?   // e.g. "USD"
  renewalLeadDaysDefault Int?      // e.g. 45
  notificationEmails     Json?     // string[] (future)
  weeklyDigest           Boolean?  // future

  // NEW: notifications
  notificationPrefs NotificationPrefs?
  notificationLogs  NotificationLog[]
}

enum NotificationType {
  RENEWAL_ALERT
  WEEKLY_DIGEST
  TEST
}

model NotificationPrefs {
  id            String   @id @default(cuid())
  companyId     String   @unique
  recipientsCsv String   @default("") // comma-separated emails
  renewalAlerts Boolean  @default(true)
  weeklyDigest  Boolean  @default(true)
  noticeDays    Int      @default(30) // fallback when a Contract doesnâ€™t specify renewalNoticeDays
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  company CompanyProfile @relation(fields: [companyId], references: [id])
}

model NotificationLog {
  id         String           @id @default(cuid())
  companyId  String
  contractId String?
  type       NotificationType
  subject    String
  sentTo     String           // comma-separated list actually used
  status     String           // "SENT" | "ERROR"
  error      String?
  sentAt     DateTime         @default(now())

  company  CompanyProfile @relation(fields: [companyId], references: [id])
  // Relation named so it pairs with Contract.logs
  contract Contract?      @relation("ContractLogs", fields: [contractId], references: [id])
}
